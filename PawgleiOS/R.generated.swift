//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var color: color { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 22 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `black`.
    var black: RswiftResources.ColorResource { .init(name: "black", path: [], bundle: bundle) }

    /// Color `gray-100`.
    var gray100: RswiftResources.ColorResource { .init(name: "gray-100", path: [], bundle: bundle) }

    /// Color `gray-200`.
    var gray200: RswiftResources.ColorResource { .init(name: "gray-200", path: [], bundle: bundle) }

    /// Color `gray-300`.
    var gray300: RswiftResources.ColorResource { .init(name: "gray-300", path: [], bundle: bundle) }

    /// Color `gray-400`.
    var gray400: RswiftResources.ColorResource { .init(name: "gray-400", path: [], bundle: bundle) }

    /// Color `gray-50`.
    var gray50: RswiftResources.ColorResource { .init(name: "gray-50", path: [], bundle: bundle) }

    /// Color `gray-500`.
    var gray500: RswiftResources.ColorResource { .init(name: "gray-500", path: [], bundle: bundle) }

    /// Color `gray-600`.
    var gray600: RswiftResources.ColorResource { .init(name: "gray-600", path: [], bundle: bundle) }

    /// Color `gray-700`.
    var gray700: RswiftResources.ColorResource { .init(name: "gray-700", path: [], bundle: bundle) }

    /// Color `gray-800`.
    var gray800: RswiftResources.ColorResource { .init(name: "gray-800", path: [], bundle: bundle) }

    /// Color `gray-900`.
    var gray900: RswiftResources.ColorResource { .init(name: "gray-900", path: [], bundle: bundle) }

    /// Color `orange-100`.
    var orange100: RswiftResources.ColorResource { .init(name: "orange-100", path: [], bundle: bundle) }

    /// Color `orange-200`.
    var orange200: RswiftResources.ColorResource { .init(name: "orange-200", path: [], bundle: bundle) }

    /// Color `orange-300`.
    var orange300: RswiftResources.ColorResource { .init(name: "orange-300", path: [], bundle: bundle) }

    /// Color `orange-400`.
    var orange400: RswiftResources.ColorResource { .init(name: "orange-400", path: [], bundle: bundle) }

    /// Color `orange-500`.
    var orange500: RswiftResources.ColorResource { .init(name: "orange-500", path: [], bundle: bundle) }

    /// Color `pointBlue`.
    var pointBlue: RswiftResources.ColorResource { .init(name: "pointBlue", path: [], bundle: bundle) }

    /// Color `pointYellow`.
    var pointYellow: RswiftResources.ColorResource { .init(name: "pointYellow", path: [], bundle: bundle) }

    /// Color `red-100`.
    var red100: RswiftResources.ColorResource { .init(name: "red-100", path: [], bundle: bundle) }

    /// Color `red-200`.
    var red200: RswiftResources.ColorResource { .init(name: "red-200", path: [], bundle: bundle) }

    /// Color `white`.
    var white: RswiftResources.ColorResource { .init(name: "white", path: [], bundle: bundle) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
          }
        }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 1 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `.swiftlint.yml`.
    var swiftlintYml: RswiftResources.FileResource { .init(name: ".swiftlint", pathExtension: "yml", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }
  }
}